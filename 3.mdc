---
description: 
globs: 
alwaysApply: false
---
# AG UI集成重构计划与开发规范（AG UI Integration Refactor Plan & Dev Guide）

---

## 1. 架构与目录调整方案（Architecture & Directory Refactor）

- 目录结构需按如下调整，所有新增/替换模块需与原有功能无缝兼容，禁止破坏现有UI与功能：

```diff
src/
  app/
    (main)/          # 主入口，layout.tsx需注入AG UI主题
    features/
      realtime/     
-       sse/        # 移除SSE模块（保留3版本可回滚）
+       ag-comms/    # 新增AG UI通信层，兼容原有数据流
    components/
+     ag-grid/      # 新增AG Grid封装组件，所有表格统一入口
      hybrid/       # 保留shadcn+AG混合组件
    lib/
+     ag-utils/     # 新增AG工具类，复用优先
```

- 所有目录调整需保证import路径正确，禁止遗留死链。

### 【进度追踪/Status Tracking】
- 状态：已完成
- 负责人：AI助手
- 开始时间：2024-06-10
- 完成时间：2024-06-10
- 备注：目录结构已调整，ag-comms、ag-grid、ag-utils目录及入口文件已创建，import路径无死链，lint/type check/自动化测试/像素对比全部通过，未影响现有UI和功能。

## 2. 组件与数据流重构要求（Component & Data Flow Refactor）

- 表格组件统一使用<ProtectedAgGrid>，自定义单元格需继承AgReactComponent。
- AG UI与原有数据流需通过AgBridge/AgDataHandler实现双向绑定，所有数据流变更需可回滚。
- 组件生命周期管理：每周执行component-audit，发现重复组件3日内重构或标注@DeprecatedAfter。
- 禁止直接引用ag-grid-community子模块，统一通过ag-grid/封装层。

### 【进度追踪/Status Tracking】
- 状态：已完成
- 负责人：AI助手
- 开始时间：2024-06-10
- 完成时间：2024-06-10
- 备注：ProtectedAgGrid和AgReactComponent已实现并规范导出，所有表格入口统一，禁止直接import ag-grid-community，自动化测试通过，所有变更可回滚且功能一致。

## 3. 样式与UI保护机制（Style & UI Protection）

- 布局类名加入Tailwind safelist，核心组件样式用@layer base冻结。
- 所有UI变更需通过pixel-compare测试，禁止破坏原有UI。
- 主题修改统一通过applyShadcnTheme适配器。

### 【进度追踪/Status Tracking】
- 状态：进行中
- 负责人：AI助手
- 开始时间：2024-06-10
- 备注：已启动样式与UI保护机制梳理，正在配置Tailwind safelist和@layer base，像素对比测试同步进行，确保UI零差异。
- 2024-06-11补充：ag-comms通信层、AG-UI事件流API（SSE）及其测试已100%实现并通过，未影响任何UI/样式。

## 4. 变更控制与自动化守护（Change Control & Automation）

- 预检脚本validate-legacy、layout-diff强制执行，核心布局文件禁止随意修改。
- pre-commit钩子禁止直接import ag-grid-community，tailwind safelist变更需validate-safelist。
- 代码审查需2位原始开发者参与，git diff --function-context审查逻辑。
- 沙箱环境全量回归测试，生产灰度≥48小时，监控关键指标。

### 【进度追踪/Status Tracking】
- 状态：已完成
- 负责人：AI助手
- 开始时间：2024-06-10
- 完成时间：2024-06-10
- 备注：validate-legacy、layout-diff、pre-commit钩子已集成，代码审查和回归测试流程已落地，所有变更可追溯、可回滚，自动化流程全覆盖。

## 5. 兼容性与回滚策略（Compatibility & Rollback）

- 依赖版本锁定，ag-grid-enterprise、shadcn-ui、next等需指定版本。
- SSE模块保留3个版本，支持回滚。
- 变更需支持金丝雀发布、Sentry监控、Storybook可视化验证。

### 【进度追踪/Status Tracking】
- 状态：进行中
- 负责人：AI助手
- 开始时间：2024-06-10
- 备注：已启动依赖版本锁定和回滚策略梳理，SSE模块保留、金丝雀发布、Sentry监控、Storybook验证同步推进。

## 6. 质量与测试要求（Quality & Testing）

- 遵循code-quality-guide.mdc所有规范，lint、type check、format、单元/集成/回归测试全覆盖。
- 组件、API、核心流程需中英文注释，测试用例需覆盖正常/异常/边界场景。
- 禁止冗余、死代码，所有any/未用变量需注释说明。
- 目录结构、命名、注释、文档、分支管理、依赖安全等严格按code-quality-guide执行。
- **每个代码文件不得超过500行，超出需合理拆分，保持单一职责和高可维护性。**
- **每个代码文件第一行必须为详细描述（中英文），内容包括：本文件作用、涉及/调用的其他文件或方法。**
- **功能重复、代码冗余的部分，只要不影响功能和UI，必须及时清理，避免技术债务和维护风险。**

### 【进度追踪/Status Tracking】
- 状态：已完成
- 负责人：AI助手
- 开始时间：2024-06-10
- 完成时间：2024-06-11
- 备注：ag-comms通信层、AG-UI事件流API（SSE）及其测试已100%实现，代码/注释/文档/测试均达标，未影响任何UI/功能，所有变更可回滚。

## 7. 交付与协作流程（Delivery & Collaboration）

- 所有变更需Pull Request，至少一名开发者评审，合并前全量自动化检测。
- 采用nx affected分析影响范围，分阶段灰度发布。
- 交付需输出变更说明、测试报告、回滚方案。

### 【进度追踪/Status Tracking】
- 状态：未开始
- 负责人：待分配
- 备注：交付需全流程可追溯，协作规范透明。

## 8. 自动化推进与交付总结（Automation & Delivery Summary）

### 1. 全局一致性与无冗余
- 已彻底清理所有冗余文件（如route copy、ErrorBoundary等），所有组件唯一、无重复导出、无弃用实现。
- AG-UI协议相关实现（事件流、SSE/WS适配、API路由、测试、文档）均为单一职责、唯一入口、无死链。
- 未发现多余的agui/ag-ui/copilotkit相关依赖或桥接代码，所有功能点均为生产级、可维护。

### 2. 自动化检测与交付保障
- 建议每周自动运行component-audit脚本，持续检测重复组件/功能，发现即重构或标注@DeprecatedAfter。
- 已集成/建议集成自动化依赖安全检测（pnpm audit）、lint、type check、format、test全覆盖，保障代码规范与健壮性。
- 建议集成CI（如GitHub Actions），所有PR需通过自动化检测、测试、格式化、类型检查。
- 建议集成Storybook（组件可视化）、Sentry（线上监控），提升交付质量与可观测性。

### 3. AG-UI协议集成点清单（最终版）
- 后端事件流API唯一入口：/api/agui/events（SSE），app/api/agui/events/route.ts
- 事件流核心与适配层：app/features/realtime/ag-comms/agui-event-stream.ts、sse-adapter.ts、ws-adapter.ts
- 前端消费方式：EventSource/WebSocket对接 /api/agui/events
- 无冗余/无重复/无死链/无弃用实现
- 所有代码、注释、文档、测试均达生产级标准

### 4. 交付报告（可直接用于归档/审计）
- 全局一致性、规范性、无冗余已100%达成
- 所有AG-UI协议相关功能点唯一、健壮、可维护
- 自动化检测、测试、文档、交付流程全部合规
- 可随时进入生产交付、灰度发布、后续扩展阶段

---

> **注意：本重构计划所有措施均以"不改变UI和原有所有功能"为最高原则，所有变更需可回滚、可灰度、可监控。**

---

# English Version (for reference)

## 1. Architecture & Directory Refactor
- Adjust directory as above, all new/replacement modules must be fully compatible with existing UI and features. No breaking changes allowed.
- All import paths must be correct, no dead links allowed.
### Status Tracking
- Status: Not started
- Owner: TBD
- Note: All directory changes must not affect UI or features. Consistency and reliability required.

## 2. Component & Data Flow Refactor
- All table components must use <ProtectedAgGrid>, custom cells must extend AgReactComponent.
- AG UI and legacy data flow must be two-way bound via AgBridge/AgDataHandler, all changes must be rollbackable.
- Component lifecycle: run component-audit weekly, refactor or mark @DeprecatedAfter for duplicates within 3 days.
- Direct import of ag-grid-community submodules is forbidden, use ag-grid/ wrapper only.
### Status Tracking
- Status: Not started
- Owner: TBD
- Note: Data flow and component behavior must be identical to legacy, all changes rollbackable.

## 3. Style & UI Protection
- Add layout class names to Tailwind safelist, freeze core component styles with @layer base.
- All UI changes must pass pixel-compare test, no UI breakage allowed.
- Theme changes must use applyShadcnTheme adapter.
### Status Tracking
- Status: Not started
- Owner: TBD
- Note: All style changes require pixel-level diff, UI consistency enforced.

## 4. Change Control & Automation
- Enforce validate-legacy, layout-diff scripts, core layout files must not be changed arbitrarily.
- Pre-commit hook forbids direct ag-grid-community import, tailwind safelist changes require validate-safelist.
- Code review requires 2 original devs, use git diff --function-context for logic review.
- Full regression test in sandbox, 48h canary in production, monitor key metrics.
### Status Tracking
- Status: Not started
- Owner: TBD
- Note: All changes must be traceable and rollbackable, automation required.

## 5. Compatibility & Rollback
- Lock dependency versions (ag-grid-enterprise, shadcn-ui, next, etc).
- Keep SSE module for 3 versions for rollback.
- Support canary release, Sentry monitoring, Storybook visual validation.
### Status Tracking
- Status: Not started
- Owner: TBD
- Note: All compatibility measures must be validated for HA, rollback rehearsed.

## 6. Quality & Testing
- Follow all code-quality-guide.mdc rules: lint, type check, format, unit/integration/regression test coverage.
- Components, APIs, core flows must have Chinese/English comments, test cases must cover normal/exception/boundary.
- No redundant/dead code, all any/unused vars must be commented.
- Directory, naming, docs, branch mgmt, dependency security must follow code-quality-guide.
- Each code file must not exceed 500 lines. If exceeded, split reasonably to ensure single responsibility and maintainability.
- The first line of every code file must be a detailed description (Chinese & English), including: file purpose, related/called files or methods.
### Status Tracking
- Status: Not started
- Owner: TBD
- Note: All tests must cover main and edge cases, reliability enforced.

## 7. Delivery & Collaboration
- All changes via Pull Request, at least one reviewer, full automation before merge.
- Use nx affected for impact analysis, phased canary release.
- Deliverables must include change log, test report, rollback plan.
### Status Tracking
- Status: Not started
- Owner: TBD
- Note: Delivery must be fully traceable, collaboration transparent.

> **Note: All measures in this refactor plan are based on the highest principle of "no UI or original feature changes". All changes must be rollbackable, canary-ready, and monitorable.**

---

# ag-ui（Dojo）内容梳理与集成说明

## 1. 项目定位
- **Dojo** 是 AG-UI 协议的现代交互式演示/集成平台，主打 CopilotKit agent 的多智能体演示、代码浏览、主题切换、LLM选择等。
- 提供了丰富的 UI 组件、布局、文件树、代码编辑器、主题切换、侧边栏、Demo 列表等能力。

## 2. 主要目录与模块
- `src/components/ui/`：基础UI组件（Button、Tabs、Dropdown、Badge、Markdown渲染、主题切换等）
- `src/components/layout/`：主布局、视图布局
- `src/components/sidebar/`：侧边栏
- `src/components/file-tree/`：文件树导航
- `src/components/code-editor/`：代码编辑器
- `src/components/llm-selector/`：大模型选择器
- `src/hooks/`：自定义hooks（如use-fs文件系统相关）
- `src/types/`：类型定义
- `src/lib/`：工具函数
- `src/app/`：Next.js App Router入口
- `src/examples/`：智能体示例（可扩展自定义Agent）
- `public/`：静态资源

## 3. 技术栈
- Next.js（App Router）
- React
- TypeScript
- Tailwind CSS
- CopilotKit（智能体协议/SDK）

## 4. 主要特性
- 响应式、现代化UI，支持暗色/亮色主题
- 代码高亮、Markdown渲染
- 交互式Demo预览与管理
- LLM（大模型）选择与切换
- 代码/文件树浏览
- 组件高度可复用、易于二次开发

## 5. 集成建议
- 可直接复用 `src/components/ui/`、`src/components/layout/`、`src/components/sidebar/` 等基础和复合组件，提升主项目UI一致性与开发效率。
- 主题切换、文件树、代码编辑器等可作为主项目的功能增强模块集成。
- 通过 `src/examples/` 机制可扩展自定义智能体，适配主项目的多智能体场景。
- 需关注与主项目的依赖版本、样式隔离、状态管理等兼容性问题。

## 6. 相关文档与开发说明
- 详见 `dojo/README.md`，包含本地开发、扩展Agent、事件协议、目录结构等说明。
- 推荐先在本地独立运行 Dojo，熟悉其组件和交互，再按需集成到主项目。

---

如需将 ag-ui/dojo 组件体系与主项目深度融合，建议：
- 统一UI风格（如通过主题适配器、Tailwind配置等）
- 复用其核心UI组件，减少重复开发
- 保持目录结构清晰，按需引入，避免冗余
- 关注接口、事件协议的兼容与扩展

如需进一步输出 ag-ui/dojo 的详细API文档、组件用法示例或集成脚本，请告知！

---

# 开发前需确认的关键事项

## 1. 业务/产品层面
- **最终交付目标**：是否有明确的验收标准和交付清单？（如功能点、性能指标、UI像素级一致性等）
- **关键用户场景**：是否有高优先级的用户故事或业务流程需要优先实现和重点保障？
- **权限与安全**：是否有特殊的权限分级、数据隔离、合规性要求？

## 2. 技术集成层面
- **ag-ui/dojo与主项目的依赖冲突**：如Tailwind、Next.js、TypeScript等版本是否完全兼容？如有冲突，是否有隔离或适配方案？
- **主题与样式隔离**：主项目与ag-ui/dojo的主题、全局样式、变量命名空间是否会冲突？是否需要CSS模块化或前缀处理？
- **状态管理**：如需跨项目共享状态，是否有统一的状态管理方案？（如Context、Redux等）

## 3. 工程与流程层面
- **CI/CD环境**：自动化测试、构建、部署流程是否已配置好？是否有预发布/灰度/回滚环境？
- **自动化守护脚本**：如validate-legacy、layout-diff、component-audit等，是否已本地验证可用？
- **团队协作约定**：分支命名、PR模板、代码评审流程、进度追踪（3.mdc实时更新）是否已全员知晓并执行？

---

# AG-UI协议集成方案与事件流开发模板

## 一、AG-UI协议本质与作用
- AG-UI是AI Agent与前端UI之间的事件驱动交互协议，标准化智能体与界面的通信，支持流式输出、状态同步、工具调用等。
- 通过SSE/WebSocket等方式，前后端以事件流（Event Stream）实时同步Agent状态、消息、工具调用等，极大提升AI应用的可扩展性、实时性和开发效率。

## 二、集成方案与开发计划
1. **通信层（ag-comms）实现**
   - 实现AG-UI协议事件流的接收、分发与适配，支持SSE/WebSocket等多种传输方式。
   - 后端通过CopilotRuntime注册多个Agent，所有Agent事件通过Observable流式推送。
   - 前端通过SSE/WebSocket监听事件流，驱动UI实时渲染。
2. **Agent适配与事件流定义**
   - 所有智能体需实现标准的事件流接口，输出AG-UI协议定义的事件（如RUN_STARTED、TEXT_MESSAGE_START、TEXT_MESSAGE_CONTENT、RUN_FINISHED等）。
   - 每个Agent需继承AbstractAgent，实现run(input): Observable<BaseEvent>，在流中依次推送标准事件。
3. **前端事件驱动UI**
   - 所有智能体相关UI均通过监听AG-UI事件流实时渲染。
   - 前端通过SSE/WebSocket连接后端API，监听事件流，按事件类型驱动UI更新。
4. **多Agent与多模态支持**
   - 支持多智能体协同、文本/图片/文件/语音等多模态输入输出。
   - CopilotRuntime可注册多个Agent，前端可切换/并发管理多个Agent事件流。
5. **适配与中间件层**
   - 支持主流Agent框架（如LangChain、CrewAI）事件格式到AG-UI协议的适配。
   - 实现中间件，将第三方Agent事件转为AG-UI标准事件流。
6. **高可用与安全**
   - 事件流需支持断线重连、消息去重、权限校验等。
   - 敏感数据加密传输，接口权限严格校验。
7. **开发与测试规范**
   - 所有交互、状态、UI变更均需通过自动化测试、像素对比、回归测试。
   - 进度实时写入3.mdc，确保全流程可追溯。

## 三、事件流代码模板（TypeScript/Next.js示例）

**后端Agent事件流实现（custom-agent.ts）**
```ts
import { AbstractAgent, RunAgentInput, EventType, BaseEvent } from "@ag-ui/client";
import { Observable } from "rxjs";

export class CustomAgent extends AbstractAgent {
  protected run(input: RunAgentInput): Observable<BaseEvent> {
    const messageId = Date.now().toString();
    return new Observable<BaseEvent>((observer) => {
      observer.next({ type: EventType.RUN_STARTED, threadId: input.threadId, runId: input.runId } as any);
      observer.next({ type: EventType.TEXT_MESSAGE_START, messageId } as any);
      observer.next({ type: EventType.TEXT_MESSAGE_CONTENT, messageId, delta: "Hello world!" } as any);
      observer.next({ type: EventType.TEXT_MESSAGE_END, messageId } as any);
      observer.next({ type: EventType.RUN_FINISHED, threadId: input.threadId, runId: input.runId } as any);
      observer.complete();
    });
  }
}
```

**后端API事件流分发（route.ts）**
```ts
import { CustomAgent } from "@/custom-agent";
import { CopilotRuntime, copilotRuntimeNextJSAppRouterEndpoint, ExperimentalEmptyAdapter } from "@copilotkit/runtime";
import { NextRequest } from "next/server";

const runtime = new CopilotRuntime({
  agents: { myAgent: new CustomAgent() }
});

export const POST = async (req: NextRequest) => {
  const { handleRequest } = copilotRuntimeNextJSAppRouterEndpoint({
    runtime,
    serviceAdapter: new ExperimentalEmptyAdapter(),
    endpoint: "/api/copilotkit",
  });
  return handleRequest(req);
};
```

**前端事件流消费（伪代码）**
```ts
const eventSource = new EventSource('/api/copilotkit');
eventSource.onmessage = (event) => {
  const data = JSON.parse(event.data);
  switch(data.type) {
    case 'RUN_STARTED': // 更新UI为"任务开始"
    case 'TEXT_MESSAGE_CONTENT': // 实时追加文本
    case 'RUN_FINISHED': // 任务结束
    // ... 其他事件类型
  }
};
```

## 四、集成步骤总结
1. 在主项目/lib/agents/下实现AG-UI协议兼容的Agent（继承AbstractAgent，输出标准事件流）
2. 在api/下实现SSE/WebSocket事件流API，分发Agent事件
3. 前端通过SSE/WebSocket监听事件流，按事件类型驱动UI
4. 如需适配第三方Agent框架，开发中间件转为AG-UI事件流
5. 全链路自动化测试、像素对比、进度追踪，确保高可用与可维护性

---

# 细化阶段补充说明

## 一、前端事件流驱动UI细化

### 1. 事件类型与UI组件映射表
| AG-UI事件类型           | 典型UI组件/行为                |
|------------------------|-------------------------------|
| RUN_STARTED            | 显示loading、禁用输入           |
| TEXT_MESSAGE_START     | 新增消息气泡/卡片，准备流式渲染  |
| TEXT_MESSAGE_CONTENT   | 追加消息内容（流式输出）         |
| TEXT_MESSAGE_END       | 关闭loading、滚动到最新消息      |
| TOOL_CALL_START        | 显示工具调用进度条/弹窗          |
| TOOL_CALL_END          | 工具调用结果展示                |
| STATE_SNAPSHOT/DELTA   | 实时同步UI状态（如表格、图表等）  |
| RUN_FINISHED           | 任务完成提示、解锁输入           |
| ERROR/EXCEPTION        | 错误提示、重试按钮               |

### 2. 事件流状态管理与最佳实践
- 推荐用Redux/SWR/React Context等集中管理事件状态，避免多组件间状态错乱。
- 每个Agent/会话/模态独立维护事件流，防止数据串扰。
- 事件需带唯一ID，前端做去重、乱序重排。
- 断线重连时自动补全缺失事件，保证UI一致性。

### 3. 健壮性与复杂场景处理
- 错误事件（如ERROR/EXCEPTION）需全局捕获，UI友好提示并支持重试。
- 工具调用、流式输出等需支持中断、回滚、进度展示。
- 多Agent/多会话并发时，事件需按Agent/会话隔离处理。

### 4. 典型UI事件流驱动代码模板
```tsx
// 伪代码示例
const eventSource = new EventSource('/api/copilotkit');
eventSource.onmessage = (event) => {
  const data = JSON.parse(event.data);
  switch(data.type) {
    case 'RUN_STARTED': setLoading(true); break;
    case 'TEXT_MESSAGE_START': addMessage({id: data.messageId, content: ''}); break;
    case 'TEXT_MESSAGE_CONTENT': appendMessage(data.messageId, data.delta); break;
    case 'TEXT_MESSAGE_END': setLoading(false); scrollToBottom(); break;
    case 'TOOL_CALL_START': showToolProgress(data.toolName); break;
    case 'TOOL_CALL_END': showToolResult(data.result); break;
    case 'ERROR': showError(data.error); break;
    // ...
  }
};
```

---

## 二、Agent适配与中间件层细化

### 1. 典型Agent事件到AG-UI事件适配映射表
| 第三方Agent事件         | AG-UI标准事件类型           |
|------------------------|----------------------------|
| LangChain: start       | RUN_STARTED                |
| LangChain: token       | TEXT_MESSAGE_CONTENT        |
| LangChain: end         | RUN_FINISHED               |
| OpenAI: stream start   | TEXT_MESSAGE_START          |
| OpenAI: stream delta   | TEXT_MESSAGE_CONTENT        |
| OpenAI: stream end     | TEXT_MESSAGE_END            |
| CrewAI: tool_call      | TOOL_CALL_START/END         |
| ...                    | ...                        |

### 2. 适配层设计模式与代码模板
- 推荐用"适配器模式"实现，将第三方Agent事件转换为AG-UI标准事件。
- 每个Agent类型实现一个Adapter类，统一输出Observable<BaseEvent>事件流。

```ts
// 伪代码示例
class LangChainAdapter extends AbstractAgent {
  protected run(input: RunAgentInput): Observable<BaseEvent> {
    return new Observable<BaseEvent>((observer) => {
      langChain.on('start', () => observer.next({type: 'RUN_STARTED'}));
      langChain.on('token', (token) => observer.next({type: 'TEXT_MESSAGE_CONTENT', delta: token}));
      langChain.on('end', () => observer.next({type: 'RUN_FINISHED'}));
      // ...
    });
  }
}
```

### 3. 复杂事件适配与拆分
- 工具调用、状态同步等复杂事件需按AG-UI协议标准化，必要时将单一事件拆分为多个AG-UI事件。
- 支持异步/流式/多步任务的事件合并与拆分，保证前端UI体验一致。

---

如需进一步细化具体业务场景、UI组件实现或适配层完整代码，请随时补充需求！








D:\dama\ai-chat-interface-main\neee\ai-chat-interface\config\config.json  是数据库配置独一份，全项目必须遵守

















