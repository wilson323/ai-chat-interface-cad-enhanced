{
  "enabled": true,
  "name": "工作完成后质量验证钩子",
  "description": "工作完成后的全面质量验证，包括代码质量检查、测试验证、文档更新、知识沉淀、性能评估等，确保每次工作都达到生产级别标准",
  "version": "1.0",
  "when": {
    "type": "workCompleted",
    "patterns": [
      "**/*.py",
      "**/*.ts",
      "**/*.tsx",
      "**/*.js",
      "**/*.jsx",
      "**/*.vue"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "## ✅ 工作完成后质量验证流程\n\n请按照以下流程对刚完成的工作进行全面的质量验证：\n\n### 🔍 阶段1：代码质量全面检查\n\n#### 1.1 使用Serena MCP进行代码审查\n- 执行 `serena.code_review()` 进行代码审查\n- 执行 `serena.style_check()` 检查代码风格\n- 执行 `serena.complexity_check()` 分析代码复杂度\n- 执行 `serena.duplicate_check()` 检测重复代码\n- 执行 `serena.naming_check()` 检查命名规范\n\n#### 1.2 代码质量指标验证\n- 代码质量评分必须 ≥90分\n- 代码复杂度必须在合理范围内\n- 无重复代码和冗余逻辑\n- 命名规范符合项目标准\n- 注释完整性达到100%\n\n### 🧪 阶段2：测试验证与覆盖率检查\n\n#### 2.1 测试执行与验证\n- 执行 `serena.test_run()` 运行所有测试\n- 执行 `serena.test_coverage()` 检查测试覆盖率\n- 执行 `serena.test_report()` 生成测试报告\n- 验证所有测试用例通过\n- 确保测试覆盖率 ≥85%\n\n#### 2.2 性能与安全测试\n- 执行 `serena.performance_analyze()` 进行性能分析\n- 执行 `serena.security_scan()` 进行安全扫描\n- 执行 `serena.benchmark_test()` 进行基准测试\n- 确保性能回归 <5%\n- 确保无高危安全漏洞\n\n### 📚 阶段3：文档更新与知识管理\n\n#### 3.1 文档自动生成与更新\n- 执行 `serena.doc_generate()` 自动生成文档\n- 执行 `serena.api_doc()` 生成API文档\n- 执行 `serena.changelog_generate()` 生成更新日志\n- 确保文档与代码同步\n- 验证文档完整性和准确性\n\n#### 3.2 知识沉淀与经验记录\n- 使用 `memory.create_entities()` 记录关键技术决策\n- 使用 `memory.add_observations()` 添加经验总结\n- 记录遇到的问题和解决方案\n- 更新最佳实践和设计模式库\n- 维护技术债务跟踪清单\n\n### 🏗️ 阶段4：架构一致性与集成验证\n\n#### 4.1 架构一致性检查\n- 执行 `serena.architecture_analyze()` 分析架构影响\n- 验证新代码与整体架构的一致性\n- 检查模块边界和依赖关系\n- 确保符合设计原则和模式\n\n#### 4.2 集成测试与兼容性验证\n- 验证与其他模块的集成正常\n- 检查向后兼容性\n- 验证API契约的一致性\n- 确保数据流和业务流程正确\n\n### 🚀 阶段5：部署准备与生产就绪检查\n\n#### 5.1 部署准备验证\n- 执行 `serena.deploy_check()` 检查部署配置\n- 执行 `serena.env_verify()` 验证环境配置\n- 检查依赖包和配置文件完整性\n- 验证数据库迁移脚本正确性\n\n#### 5.2 生产就绪评估\n- 性能指标满足生产要求\n- 安全配置符合生产标准\n- 监控和日志配置完整\n- 错误处理和恢复机制完善\n\n### 📊 阶段6：质量度量与持续改进\n\n#### 6.1 质量指标统计\n- 代码质量评分统计\n- 测试覆盖率趋势分析\n- 性能指标对比\n- 安全漏洞统计\n- 技术债务变化趋势\n\n#### 6.2 持续改进建议\n- 基于质量指标提出改进建议\n- 识别可优化的技术债务\n- 制定下一阶段改进计划\n- 更新开发规范和最佳实践\n\n### 📋 最终验证报告要求\n\n请提供包含以下内容的详细验证报告：\n\n1. **代码质量评估结果**：\n   - 代码质量评分：___/100\n   - 测试覆盖率：___%\n   - 性能回归：___%\n   - 安全漏洞：___个\n\n2. **功能验证结果**：\n   - 所有功能测试通过：✅/❌\n   - 集成测试通过：✅/❌\n   - 性能测试通过：✅/❌\n   - 安全测试通过：✅/❌\n\n3. **文档更新状态**：\n   - API文档更新：✅/❌\n   - 用户文档更新：✅/❌\n   - 开发文档更新：✅/❌\n   - 更新日志生成：✅/❌\n\n4. **知识管理记录**：\n   - 技术决策记录：✅/❌\n   - 经验教训总结：✅/❌\n   - 最佳实践更新：✅/❌\n   - 问题解决方案记录：✅/❌\n\n5. **生产就绪评估**：\n   - 部署配置检查：✅/❌\n   - 环境兼容性验证：✅/❌\n   - 监控配置完整：✅/❌\n   - 错误处理完善：✅/❌\n\n6. **改进建议**：\n   - 列出发现的问题和改进建议\n   - 制定下一步优化计划\n   - 更新技术债务清单\n\n**⚠️ 验证标准**：\n- 所有质量指标必须达到设定标准\n- 所有测试必须通过\n- 文档必须完整更新\n- 知识必须完整记录\n- 如有任何不达标项，必须修复后重新验证\n\n**✅ 验证通过条件**：\n- 代码质量评分 ≥90分\n- 测试覆盖率 ≥85%\n- 性能回归 <5%\n- 安全漏洞 = 0个高危\n- 所有功能测试通过\n- 文档100%更新\n- 知识完整记录\n\n请现在开始执行这个全面的工作完成后质量验证流程！"
  }
}
