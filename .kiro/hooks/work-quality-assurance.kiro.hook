{
  "enabled": true,
  "name": "工作前质量保证分析",
  "description": "每次执行新工作前进行全面的质量保证分析，包括MCP工具可用性分析、历史教训总结、全局代码逻辑梳理、异常状态检查，以及工作完成后的全面测试验证，确保每次工作都符合项目核心目标 ，上次工作的代码冗余和文当冗余的验证",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "app/**/*.tsx",
      "app/**/*.ts",
      "components/**/*.tsx",
      "lib/**/*.ts",
      "types/**/*.ts",
      "config/**/*.ts",
      "hooks/**/*.ts",
      "contexts/**/*.tsx",
      "prisma/**/*.prisma",
      "package.json",
      "next.config.mjs",
      "tailwind.config.ts",
      "tsconfig.json"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "## 工作前质量保证分析\n\n请在开始新的工作任务前，按照以下步骤进行全面的质量保证分析：\n\n### 1. MCP工具可用性分析\n- 分析当前可用的MCP工具和功能\n- 评估哪些工具可以在本次工作中使用\n- 制定工具使用策略，确保充分利用现有工具提升工作效率\n\n### 2. 历史教训总结\n- 回顾之前工作中遇到的问题和解决方案\n- 总结可以应用到本次工作的经验教训\n- 识别需要在本次工作中特别注意的风险点\n\n### 3. 全局代码逻辑梳理\n- 分析当前代码架构和实现方案的合理性\n- 检查是否存在架构异常或设计问题\n- 确保新的工作方案与整体架构保持一致\n\n### 4. 异常状态检查\n- 检查上次工作是否还有未解决的异常或问题\n- 如发现异常，必须先修复后才能开始新工作\n- 验证系统当前状态是否适合开始新的开发工作\n-上次工作的代码冗余和文当冗余的验证\n\n### 5. 工作目标对齐检查\n- 确认本次工作任务与项目总体核心目标的一致性\n- 评估工作优先级和资源分配的合理性\n- 制定明确的工作计划和验收标准\n\n### 6. 测试策略制定\n- 规划本次工作完成后需要进行的测试类型\n- 包括单元测试、集成测试、功能测试的具体计划\n- 确保测试覆盖率和质量标准\n\n请基于以上分析，提供详细的工作前评估报告，并给出是否可以开始新工作的明确建议。如果发现任何阻塞问题，请优先解决后再开始新的工作任务。"
  }
}