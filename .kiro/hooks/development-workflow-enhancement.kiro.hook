{
  "enabled": true,
  "name": "开发工作流程增强钩子",
  "description": "基于项目开发规范的全面工作流程钩子，集成MCP工具使用、代码质量保证、测试验证、文档同步等功能，确保每次开发工作都符合生产级别标准",
  "version": "2.0",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/*.py",
      "**/*.ts",
      "**/*.tsx",
      "**/*.js",
      "**/*.jsx",
      "**/*.vue",
      "**/*.md",
      "requirements.txt",
      "package.json",
      "pyproject.toml",
      "Dockerfile",
      "docker-compose.yml",
      ".env*",
      "config/**/*",
      "docs/**/*",
      "tests/**/*",
      "src/**/*",
      "app/**/*",
      "lib/**/*",
      "components/**/*",
      "utils/**/*",
      "types/**/*",
      "hooks/**/*",
      "contexts/**/*"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "## 🚀 开发工作流程增强分析\n\n请按照以下完整流程进行开发工作前的全面分析和准备：\n\n### 📋 阶段1：工作前质量保证分析\n\n#### 1.1 MCP工具可用性全面分析\n- **必须使用的MCP工具清单**：\n  - `serena` - 代码质量管理、文档生成、测试覆盖率\n  - `zen` - 思维分析、架构设计验证\n  - `memory` - 项目知识管理、历史经验存储\n  - `sequential-thinking` - 逻辑推理、问题分解\n  - `context7` - 技术文档查询、最佳实践获取\n  - `time` - 时间管理、进度跟踪\n  - `git` - 版本控制、变更管理\n  - `fetch` - 外部资源获取、技术调研\n- **工具使用策略制定**：为本次工作制定具体的MCP工具使用计划\n- **工具协同方案**：确保多个MCP工具之间的协同工作\n\n#### 1.2 历史教训与经验复用\n- 使用 `memory.search_nodes()` 查询相关历史经验\n- 分析之前类似工作的成功模式和失败教训\n- 识别可复用的代码模块、设计模式、解决方案\n- 制定风险预防措施\n\n#### 1.3 全局代码架构一致性检查\n- 使用 `serena.architecture_analyze()` 分析当前架构\n- 检查新工作是否与现有架构保持一致\n- 验证模块边界和依赖关系的合理性\n- 确保符合项目开发规范要求\n\n#### 1.4 代码冗余与文档冗余验证\n- 使用 `serena.duplicate_check()` 检测代码重复\n- 搜索项目中是否存在类似功能模块\n- 验证文档的一致性和完整性\n- 清理过期或冗余的文档和代码\n\n#### 1.5 异常状态全面检查\n- 检查上次工作遗留的未解决问题\n- 验证系统当前运行状态\n- 确认开发环境配置正确性\n- 检查依赖包和配置文件的完整性\n\n### 📊 阶段2：工作规划与目标对齐\n\n#### 2.1 工作目标与项目核心使命对齐\n- 确认本次工作与项目总体目标的一致性\n- 评估工作优先级和资源分配\n- 制定明确的工作计划和里程碑\n- 设定可量化的验收标准\n\n#### 2.2 技术方案设计验证\n- 使用 `context7.get-library-docs()` 获取最新技术文档\n- 验证技术选型的合理性和前瞻性\n- 确保方案符合生产级别要求\n- 评估性能、安全性、可维护性\n\n#### 2.3 开发规范遵循检查\n- 确认代码风格和命名规范\n- 验证文件组织结构的合理性\n- 检查注释和文档的完整性要求\n- 确保符合Windows开发环境特殊要求\n\n### 🧪 阶段3：测试策略与质量保证\n\n#### 3.1 测试策略全面制定\n- **单元测试**：使用 `serena.test_generate()` 生成测试用例\n- **集成测试**：设计模块间交互测试方案\n- **功能测试**：制定端到端测试计划\n- **性能测试**：使用 `serena.performance_analyze()` 进行性能基准测试\n- **安全测试**：使用 `serena.security_scan()` 进行安全扫描\n\n#### 3.2 质量标准设定\n- 代码覆盖率目标：≥85%\n- 代码质量评分：≥90分\n- 性能回归控制：<5%\n- 安全漏洞：0个高危漏洞\n- 文档完整性：100%\n\n#### 3.3 持续集成准备\n- 配置自动化测试流程\n- 设置代码质量检查门禁\n- 准备部署和回滚方案\n- 建立监控和告警机制\n\n\n### 📝 阶段4：文档与知识管理\n\n#### 4.1 文档同步更新计划\n- 使用 `serena.doc_generate()` 自动生成文档\n- 更新API文档和使用说明\n- 同步更新开发规范文档\n- 维护项目知识库的完整性\n\n#### 4.2 知识沉淀与共享\n- 使用 `memory.create_entities()` 记录关键决策\n- 建立可复用的代码模板和最佳实践\n- 更新团队知识分享文档\n- 维护技术债务跟踪清单\n\n### ⚡ 阶段5：执行准备与风险控制\n\n#### 5.1 执行环境准备\n- 确认开发环境配置完整性\n- 验证依赖包和工具链可用性\n- 准备必要的测试数据和环境\n- 建立备份和恢复机制\n\n#### 5.2 风险控制措施\n- 制定详细的回滚计划\n- 设置关键节点检查机制\n- 建立异常处理和恢复流程\n- 准备应急响应预案\n-每个执行的任务结束且验证后自动提交git\n\n### 📋 最终评估报告要求\n\n请基于以上全面分析，提供包含以下内容的详细评估报告：\n\n1. **MCP工具使用计划**：具体的工具使用策略和时间安排\n2. **代码质量保证措施**：具体的质量控制点和验收标准\n3. **测试验证方案**：完整的测试计划和执行策略\n4. **风险评估与控制**：识别的风险点和对应的控制措施\n5. **工作可行性判断**：明确的开始工作建议或阻塞问题解决方案\n6. **预期交付成果**：明确的工作成果和质量标准\n\n**⚠️ 重要提醒**：\n- 如发现任何阻塞问题，必须优先解决后再开始新工作\n- 所有工作必须符合生产级别交付标准\n- 严格遵循项目开发规范和最佳实践\n- 确保充分利用MCP工具提升工作效率和质量\n- 禁止使用模拟数据和服务，必须基于真实环境开发测试\n\n请现在开始执行这个全面的工作前分析流程！"
  }
}