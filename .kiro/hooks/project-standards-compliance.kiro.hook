{
  "enabled": true,
  "name": "项目规范遵循检查钩子",
  "description": "确保所有开发工作严格遵循项目开发规范，包括代码规范、文档规范、测试规范、安全规范等，保证生产级别交付质量",
  "version": "1.0",
  "when": {
    "type": "beforeCommit",
    "patterns": ["**/*"]
  },
  "then": {
    "type": "askAgent",
    "prompt": "## 📋 项目规范遵循检查流程\n\n请对即将提交的代码进行全面的项目规范遵循检查：\n\n### 🐍 Python开发规范检查\n\n#### 1.1 代码风格规范\n- **PEP 8规范遵循**：使用 `serena.style_check()` 检查\n  - 行长度限制88字符\n  - 缩进使用4个空格\n  - 导入语句规范\n  - 空行使用规范\n- **代码格式化**：确保使用black进行格式化\n- **导入排序**：确保使用isort进行导入排序\n- **代码检查**：使用flake8进行代码检查\n\n#### 1.2 类型注解规范\n- **函数类型注解**：所有函数必须包含完整类型注解\n- **变量类型注解**：复杂类型变量必须添加类型注解\n- **mypy检查**：使用mypy进行静态类型检查\n- **typing模块使用**：正确使用typing模块的类型定义\n\n#### 1.3 文件命名规范\n- **文件名规范**：\n  - 必须使用英文命名\n  - 全部小写字母\n  - 单词间使用下划线连接\n  - 文件名简短但具有描述性\n  - 避免特殊字符\n- **目录结构规范**：遵循项目目录结构标准\n\n### 📝 注释与文档规范检查\n\n#### 2.1 函数级注释规范\n- **Google风格文档字符串**：\n  ```python\n  def function_name(param1: type, param2: type) -> return_type:\n      \"\"\"函数功能简要描述\n      \n      详细功能说明，包括业务逻辑和技术实现要点。\n      \n      Args:\n          param1: 参数1的详细说明\n          param2: 参数2的详细说明\n      \n      Returns:\n          返回值的详细说明\n          \n      Raises:\n          ValueError: 异常情况说明\n          TypeError: 异常情况说明\n          \n      Examples:\n          >>> result = function_name(\"test\", 100)\n          >>> print(result)\n          期望输出结果\n      \"\"\"\n  ```\n- **必须包含的内容**：\n  - 函数功能说明（中文）\n  - 参数类型和含义说明\n  - 返回值类型和含义说明\n  - 可能的异常情况\n  - 使用示例代码\n\n#### 2.2 类级注释规范\n- **类文档字符串**：说明类的职责和功能\n- **主要属性说明**：列出重要属性和方法\n- **使用场景说明**：说明类的适用场景\n- **示例代码**：提供使用示例\n\n#### 2.3 模块级注释规范\n- **模块功能说明**：说明模块的整体功能\n- **主要组件列表**：列出主要的类和函数\n- **依赖关系说明**：说明模块依赖\n- **版本信息**：包含版本和更新信息\n\n### 🧪 测试规范检查\n\n#### 3.1 测试覆盖率要求\n- **最低覆盖率**：使用 `serena.test_coverage()` 确保 ≥85%\n- **关键路径覆盖**：核心业务逻辑100%覆盖\n- **边界条件测试**：包含边界值和异常情况测试\n- **集成测试**：模块间交互测试完整\n\n#### 3.2 测试用例规范\n- **pytest框架使用**：统一使用pytest编写测试\n- **测试命名规范**：test_功能描述_预期结果\n- **测试数据管理**：使用fixture管理测试数据\n- **Mock使用规范**：正确使用mock模拟外部依赖\n\n### 🔒 安全规范检查\n\n#### 4.1 敏感信息处理\n- **硬编码检查**：使用 `serena.secret_scan()` 扫描敏感信息\n- **环境变量使用**：敏感配置使用环境变量\n- **密钥管理**：正确的密钥存储和使用方式\n- **数据加密**：敏感数据必须加密存储\n\n#### 4.2 输入验证与安全\n- **输入校验**：所有外部输入必须校验\n- **SQL注入防护**：使用参数化查询\n- **XSS防护**：输出数据正确转义\n- **CSRF防护**：实现CSRF保护机制\n\n### 🚀 性能规范检查\n\n#### 5.1 性能要求\n- **响应时间**：API响应时间 <200ms\n- **内存使用**：避免内存泄漏和过度使用\n- **数据库查询**：优化查询性能，避免N+1问题\n- **缓存策略**：合理使用缓存提升性能\n\n#### 5.2 异步编程规范\n- **asyncio使用**：IO密集型操作使用异步\n- **async/await语法**：正确使用异步语法\n- **异步异常处理**：完善的异步异常处理\n- **资源管理**：正确的异步资源管理\n\n### 📁 项目结构规范检查\n\n#### 6.1 目录结构规范\n- **标准目录结构**：遵循项目目录规范\n- **模块组织**：逻辑清晰的模块划分\n- **配置文件管理**：统一的配置文件组织\n- **静态资源管理**：规范的静态资源存放\n\n#### 6.2 依赖管理规范\n- **requirements.txt**：完整的依赖列表\n- **版本锁定**：重要依赖版本锁定\n- **虚拟环境**：使用venv进行环境隔离\n- **依赖安全**：定期检查依赖安全漏洞\n\n### 🔄 版本控制规范检查\n\n#### 7.1 Git提交规范\n- **提交信息格式**：\n  ```\n  type(scope): 简短描述\n  \n  详细描述本次提交的内容和原因\n  \n  - 变更点1\n  - 变更点2\n  \n  Closes #issue_number\n  ```\n- **提交类型**：feat, fix, docs, style, refactor, test, chore\n- **提交粒度**：每次提交包含单一逻辑变更\n- **分支管理**：遵循Git Flow工作流\n\n#### 7.2 代码审查要求\n- **审查清单**：使用标准化审查清单\n- **质量门禁**：通过所有质量检查才能合并\n- **文档同步**：代码变更必须同步更新文档\n- **测试验证**：新功能必须包含对应测试\n\n### 🌍 Windows环境特殊要求\n\n#### 8.1 路径处理规范\n- **路径分隔符**：使用os.path或pathlib处理路径\n- **文件编码**：统一使用UTF-8编码\n- **换行符处理**：正确处理不同系统的换行符\n- **权限管理**：考虑Windows权限特殊性\n\n#### 8.2 环境配置规范\n- **PowerShell兼容**：确保脚本在PowerShell中正常运行\n- **环境变量**：正确设置和使用环境变量\n- **服务管理**：Windows服务的正确配置\n- **防火墙配置**：网络服务的防火墙配置\n\n### 📊 质量检查清单\n\n请使用以下MCP工具进行全面检查：\n\n#### 代码质量检查\n- [ ] `serena.code_review()` - 代码审查通过\n- [ ] `serena.style_check()` - 代码风格符合规范\n- [ ] `serena.complexity_check()` - 代码复杂度合理\n- [ ] `serena.duplicate_check()` - 无重复代码\n- [ ] `serena.naming_check()` - 命名规范符合要求\n\n#### 文档检查\n- [ ] `serena.doc_check()` - 文档完整性检查通过\n- [ ] 函数级注释完整且符合Google风格\n- [ ] 类级和模块级文档完整\n- [ ] API文档与代码同步\n\n#### 测试检查\n- [ ] `serena.test_coverage()` - 测试覆盖率 ≥85%\n- [ ] `serena.test_run()` - 所有测试通过\n- [ ] 包含单元测试、集成测试\n- [ ] 测试用例命名规范\n\n#### 安全检查\n- [ ] `serena.security_scan()` - 安全扫描通过\n- [ ] `serena.secret_scan()` - 无敏感信息泄露\n- [ ] 输入验证完整\n- [ ] 权限控制正确\n\n#### 性能检查\n- [ ] `serena.performance_analyze()` - 性能分析通过\n- [ ] 响应时间符合要求\n- [ ] 内存使用合理\n- [ ] 数据库查询优化\n\n#### 项目规范检查\n- [ ] 文件命名符合规范\n- [ ] 目录结构正确\n- [ ] 依赖管理规范\n- [ ] Git提交信息规范\n\n### ⚠️ 检查结果处理\n\n**通过条件**：\n- 所有检查项目必须通过\n- 代码质量评分 ≥90分\n- 测试覆盖率 ≥85%\n- 无高危安全漏洞\n- 文档完整性100%\n\n**不通过处理**：\n- 如有任何检查项不通过，必须修复后重新检查\n- 记录问题和解决方案到知识库\n- 更新相关规范和最佳实践\n\n**持续改进**：\n- 定期审查和更新项目规范\n- 收集团队反馈优化流程\n- 建立规范培训和分享机制\n\n请现在开始执行全面的项目规范遵循检查！"
  }
}