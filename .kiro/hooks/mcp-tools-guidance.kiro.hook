{
  "enabled": true,
  "name": "MCP工具使用指导钩子",
  "description": "提供MCP工具使用指导，确保开发过程中充分利用所有可用的MCP工具，提升开发效率和代码质量",
  "version": "1.0",
  "when": {
    "type": "beforeTask",
    "patterns": ["*"]
  },
  "then": {
    "type": "askAgent",
    "prompt": "## 🛠️ MCP工具使用指导与策略制定\n\n请根据当前任务类型，制定详细的MCP工具使用策略：\n\n### 📋 可用MCP工具清单与功能说明\n\n#### 🔧 代码质量与分析工具\n**Serena MCP** - 全面的代码质量管理工具\n- `serena.code_review()` - 代码审查\n- `serena.style_check()` - 代码风格检查\n- `serena.complexity_check()` - 代码复杂度分析\n- `serena.duplicate_check()` - 重复代码检测\n- `serena.naming_check()` - 命名规范检查\n- `serena.format_code()` - 代码格式化\n- `serena.doc_generate()` - 自动生成文档\n- `serena.test_generate()` - 生成测试用例\n- `serena.security_scan()` - 安全漏洞扫描\n- `serena.performance_analyze()` - 性能分析\n- `serena.architecture_analyze()` - 架构分析\n\n#### 🧠 智能分析与思维工具\n**Zen MCP** - 智能思维分析工具\n- `zen.chat()` - 智能对话与分析\n- `zen.thinkdeep()` - 深度思维分析\n- `zen.planner()` - 任务规划\n- `zen.consensus()` - 多模型共识分析\n- `zen.debug()` - 调试分析\n- `zen.analyze()` - 综合分析\n- `zen.refactor()` - 重构分析\n\n#### 💾 知识管理工具\n**Memory MCP** - 项目知识管理\n- `memory.create_entities()` - 创建知识实体\n- `memory.add_observations()` - 添加观察记录\n- `memory.search_nodes()` - 搜索知识节点\n- `memory.read_graph()` - 读取知识图谱\n\n#### 🔄 逻辑推理工具\n**Sequential Thinking MCP** - 逻辑推理与问题分解\n- `sequential_thinking.process_thought()` - 处理思维过程\n- `sequential_thinking.generate_summary()` - 生成总结\n\n#### 📚 技术文档工具\n**Context7 MCP** - 技术文档查询\n- `context7.resolve-library-id()` - 解析库ID\n- `context7.get-library-docs()` - 获取库文档\n\n#### ⏰ 时间管理工具\n**Time MCP** - 时间管理\n- `time.get_current_time()` - 获取当前时间\n- `time.convert_time()` - 时间转换\n\n#### 🔄 版本控制工具\n**Git MCP** - Git版本控制\n- `git.status()` - 查看状态\n- `git.diff()` - 查看差异\n- `git.commit()` - 提交代码\n- `git.log()` - 查看日志\n\n#### 🌐 网络资源工具\n**Fetch MCP** - 网络资源获取\n- `fetch.fetch()` - 获取网络资源\n\n### 🎯 任务类型与MCP工具使用策略\n\n#### 📝 需求分析阶段\n**推荐工具组合**：\n1. `zen.planner()` - 制定详细计划\n2. `memory.search_nodes()` - 查找相关历史经验\n3. `context7.get-library-docs()` - 获取技术文档\n4. `sequential_thinking.process_thought()` - 逻辑分析\n\n#### 🏗️ 架构设计阶段\n**推荐工具组合**：\n1. `zen.thinkdeep()` - 深度架构分析\n2. `serena.architecture_analyze()` - 架构一致性检查\n3. `zen.consensus()` - 多方案对比分析\n4. `memory.create_entities()` - 记录设计决策\n\n#### 💻 编码开发阶段\n**推荐工具组合**：\n1. `serena.code_review()` - 实时代码审查\n2. `serena.duplicate_check()` - 避免代码重复\n3. `serena.style_check()` - 保持代码风格\n4. `zen.debug()` - 问题调试分析\n5. `memory.add_observations()` - 记录开发经验\n\n#### 🧪 测试验证阶段\n**推荐工具组合**：\n1. `serena.test_generate()` - 生成测试用例\n2. `serena.test_coverage()` - 检查覆盖率\n3. `serena.performance_analyze()` - 性能测试\n4. `serena.security_scan()` - 安全测试\n\n#### 📖 文档编写阶段\n**推荐工具组合**：\n1. `serena.doc_generate()` - 自动生成文档\n2. `serena.api_doc()` - API文档生成\n3. `memory.read_graph()` - 获取项目知识\n\n#### 🔄 重构优化阶段\n**推荐工具组合**：\n1. `zen.refactor()` - 重构分析\n2. `serena.complexity_check()` - 复杂度分析\n3. `serena.code_optimize()` - 优化建议\n4. `zen.analyze()` - 综合分析\n\n### 📊 MCP工具使用策略制定要求\n\n请根据当前具体任务，制定包含以下内容的MCP工具使用策略：\n\n#### 1. 任务分析\n- 明确当前任务的类型和目标\n- 识别任务的关键挑战和难点\n- 评估任务的复杂度和风险等级\n\n#### 2. 工具选择策略\n- 列出适用于当前任务的MCP工具\n- 说明每个工具的使用目的和预期效果\n- 制定工具使用的优先级和顺序\n\n#### 3. 工具协同方案\n- 设计多个MCP工具之间的协同工作流程\n- 确保工具输出结果的有效传递和利用\n- 避免工具功能重复和资源浪费\n\n#### 4. 质量保证措施\n- 使用MCP工具进行质量检查的具体计划\n- 设定质量标准和验收条件\n- 制定问题发现和解决的流程\n\n#### 5. 知识管理计划\n- 使用Memory MCP记录关键信息的策略\n- 经验总结和知识沉淀的具体方法\n- 知识复用和分享的机制\n\n#### 6. 效率提升目标\n- 通过MCP工具使用预期达到的效率提升\n- 质量改进的具体指标和目标\n- 风险降低和问题预防的措施\n\n### ⚠️ 强制使用要求\n\n**必须遵循的MCP工具使用规则**：\n1. 每个开发阶段必须使用对应的MCP工具进行检查和验证\n2. 所有代码提交前必须通过Serena MCP的质量检查\n3. 重要技术决策必须使用Zen MCP进行深度分析\n4. 所有关键信息必须使用Memory MCP进行记录和管理\n5. 复杂问题必须使用Sequential Thinking MCP进行逻辑分解\n6. 技术调研必须使用Context7 MCP获取最新文档\n\n**违规处理**：\n- 如发现绕过MCP工具使用的行为，必须重新执行相关流程\n- 质量不达标的工作必须使用对应MCP工具重新处理\n- 定期审查MCP工具使用情况，持续优化使用策略\n\n请现在根据当前任务制定详细的MCP工具使用策略！"
  }
}
