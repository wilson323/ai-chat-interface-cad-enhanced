---
description: 
globs: 
alwaysApply: false
---
# 代码质量管理指南

本文档介绍了项目中使用的代码质量管理工具和流程，帮助团队成员理解和遵循统一的代码规范。

## 工具概览

项目使用以下工具来保证代码质量：

- **Husky**: 用于设置 Git 钩子，在代码提交前自动运行检查
- **lint-staged**: 只对暂存的文件运行检查，提高效率
- **ESLint**: 静态代码分析工具，检查 JavaScript/TypeScript 代码问题
- **Prettier**: 代码格式化工具，确保代码风格一致
- **TypeScript**: 提供类型检查，减少运行时错误

## 自动检查流程

当你尝试提交代码时，会自动触发以下检查：

1. **lint-staged** 会识别你暂存的文件
2. 对 JavaScript/TypeScript 文件运行 **ESLint** 和 **Prettier**
3. 对其他文件（如 JSON、Markdown）运行 **Prettier**
4. 如果检查失败，提交会被阻止，你需要修复问题后再次尝试提交

## 常用命令

以下是一些常用的命令，可以帮助你管理代码质量：

### 安装和设置

```bash
# 安装所有依赖并设置 Husky
npm run setup-husky
```

### 代码检查

```bash
# 运行 ESLint 检查
npm run lint

# 运行 TypeScript 类型检查
npm run check-types

# 运行 Prettier 格式检查
npm run format:check

# 运行全面代码检查
npm run check-code
```

### 自动修复

```bash
# 运行 ESLint 自动修复
npm run lint:fix

# 运行 Prettier 格式化
npm run format

# 运行全面自动修复
npm run fix-code
```

## 常见问题解决

### 提交被阻止

如果你的提交被阻止，请查看控制台输出，了解具体问题。通常你可以：

1. 运行 `npm run fix-code` 尝试自动修复
2. 如果自动修复不能解决所有问题，请手动修复剩余问题
3. 修复后，重新暂存文件并尝试提交

### 临时跳过检查

在特殊情况下，如果你需要临时跳过检查（不推荐），可以使用：

```bash
git commit -m "你的提交信息" --no-verify
```

**注意**：请谨慎使用此选项，并在之后尽快修复代码问题。

### 配置文件

如果需要调整配置，可以修改以下文件：

- ESLint 配置: `.eslintrc.json`
- Prettier 配置: `.prettierrc.json`
- lint-staged 配置: `.lintstagedrc.json`

## 最佳实践

1. **经常提交**：小批量、频繁的提交比大批量的提交更容易通过检查
2. **提交前自检**：在提交前运行 `npm run check-code` 预先发现问题
3. **保持更新**：定期更新依赖，获取最新的规则和修复
4. **学习规则**：了解 ESLint 规则的含义，提高代码质量意识

1. 中文回复
2. 遵循架构设计，保持代码风格一致 代码修改遵循单一职责原则，不混合多个变更 
3. 在进行代码设计规划的时候，请符合"第一性原理" 
4. 在代码实现的时候，请符合"KISS原则"和"SOLID原则" 
5. 尽量复用已有代码，避免重复代码
6. 严格检测和避免功能代码重复，定期使用工具（如 lint、代码重复检测工具）扫描项目，发现重复实现应及时合并或复用，禁止复制粘贴式开发。
7. 严禁冗余代码、无用代码、无用文件或文件夹存在。任何清理操作前，需全项目范围内确认无依赖、无引用，确保删除不会影响功能和稳定性。
8. 代码提交前需自查和互查，确保无死代码（dead code）、无未使用的变量、函数、模块等，保持代码整洁。
9. 逻辑实现需严谨，边界条件、异常处理、输入校验等必须覆盖，避免因疏漏导致线上故障。
10. 代码需具备良好可读性和可维护性，命名规范、注释清晰，复杂逻辑需有必要注释说明。
11. 重要功能、核心模块需配套单元测试和集成测试，确保高可靠性，测试覆盖率需达标。
12. 代码合并前需通过自动化 lint 检查、测试用例，确保无低级错误和风格不一致问题。
13. 定期进行代码审查和技术债务清理，持续优化项目结构和代码质量，保持生产级别高端交付标准。
14. UI 设计与实现需严格遵循项目统一的设计规范（如色彩、字体、间距、组件风格等），禁止随意更改样式，确保用户体验一致性。所有 UI 组件应优先复用已有组件库，避免重复造轮子。
15. 所有公共方法、API、核心业务流程需配套完善的中英文注释和开发文档，便于团队协作和后续维护。
16. 采用规范的分支管理策略（如 Git Flow），所有功能、修复需通过 Pull Request 并经至少一名开发者代码评审后方可合并主分支。
17. 定期检查依赖库版本，及时修复安全漏洞，避免引入未使用或重复依赖。
18. 关注前后端性能，避免无谓的资源消耗，关键路径需有性能监控和优化措施。
19. 前后端均需防范常见安全风险（如XSS、SQL注入、CSRF等），敏感信息加密存储，接口权限校验严格。
20. 如有多语言需求，需遵循国际化（i18n）标准，UI 需兼顾可访问性（a11y）设计。
21. 配置自动化测试、构建、部署流程，确保每次提交都能自动检测问题并快速反馈。
22. 每个代码文件行数不得超过500行，超过需进行合理拆分，保持单文件职责清晰、结构简洁。
23. 文件、文件夹、方法、变量命名需规范、语义明确，禁止出现相似或难以区分的命名，避免歧义和混淆。
24. 项目目录结构需规整清晰，相关文件应归类存放，避免杂乱无章，便于查找和维护。
25. 每个功能模块开发完成后，必须进行严谨的功能测试，确保所有业务流程、边界条件、异常场景均被覆盖，且测试通过后方可上线。
26. 全项目需定期进行高可用性测试，包括但不限于压力测试、异常恢复测试、兼容性测试，确保系统在高并发、异常情况下依然稳定可靠。
27. 所有测试用例需结构清晰、覆盖全面，命名规范，需包含正常流程、异常流程、边界条件等，测试结果需可追溯。
28. 测试脚本、自动化测试代码需与主项目代码分离管理，目录结构清晰，便于维护和查找。废弃或暂时不用的测试脚本需及时归档至专门目录，避免影响主流程，后续如需使用可从归档目录查找恢复。
29. 测试过程中需确保新增或修改功能不会影响其他模块，需有回归测试流程，防止引入回归缺陷。
30. 测试报告需定期输出，记录测试覆盖率、缺陷情况、修复进度等，便于质量跟踪和持续改进。
31. 类型安全与 any/未用变量处理规范：
    - 任何类型补全、any 消除，优先补全核心数据流、API、hooks、组件，明确接口、类型别名或泛型。
    - 对外暴露的 API、props、返回值必须有类型，内部临时变量可适当宽松。
    - 一时无法确定类型时，可用 unknown 或 TODO 注释标记，后续补全。
    - 未用变量清理需严格区分"暂未用"与"真无用"：明确为调试、未来扩展、保留接口的变量，需加注释说明保留原因，并用 _ 前缀（如 _futureVar）避免 linter 报警；真正无用、历史遗留、已废弃的变量，全局确认无引用后再删除。
    - 自动化检测（lint、IDE）只做提示，不自动删除，需人工 review。大规模清理前建议拉分支、写好变更说明，团队评审后合并。
    - 所有保留的 any、未用变量，需在代码旁加中英文注释说明原因，便于后续维护和团队理解。
    - 类型安全和变量清理要"安全第一"，宁可多留注释、少删变量，也不能因追求"0 any/0未用变量"而影响未来扩展和团队协作。